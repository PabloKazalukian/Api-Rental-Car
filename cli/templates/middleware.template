import { Request, Response, NextFunction } from "express";
import { validate } from "class-validator";
import { HttpResponse } from "../shared/http.response";
import { formatValidationErrors } from "../shared/validators/error-formatter";
import { __Name__DTO } from "../dtos/__name__.dto";

export class __Name__Middleware {
    constructor(private httpResponse: HttpResponse ) { }

    __name__Validator(req: Request, res: Response, next: NextFunction) {
        const valid = new __Name__DTO();
        Object.assign(valid, req.body);

        validate(valid).then((err) => {
            if (err.length > 0) {
                return this.httpResponse.Error(res, formatValidationErrors(err));
            } else {
                next();
            }
        });
    }
}
